Terminals unused in grammar

    COLON


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 program: $@1 statement_list

    3 statement_list: ε
    4               | statement_list statement

    5 statement: declaration
    6          | expr_stmt
    7          | compound_stmt
    8          | if_stmt
    9          | while_stmt
   10          | io_stmt
   11          | return_stmt

   12 $@2: ε

   13 compound_stmt: LBRACE $@2 statement_list RBRACE

   14 if_stmt: IF LPAREN expr RPAREN compound_stmt
   15        | IF LPAREN expr RPAREN compound_stmt ELSE compound_stmt

   16 while_stmt: WHILE LPAREN expr RPAREN compound_stmt

   17 declaration: type_specifier ID SEMICOLON
   18            | type_specifier ID ASSIGN expr SEMICOLON

   19 type_specifier: INT
   20               | STRING_TYPE
   21               | LIST_TYPE

   22 expr_stmt: SEMICOLON
   23          | expr SEMICOLON

   24 io_stmt: INPUT LPAREN expr RPAREN SEMICOLON
   25        | PRINT LPAREN expr RPAREN SEMICOLON

   26 return_stmt: RETURN expr SEMICOLON
   27            | RETURN SEMICOLON

   28 expr: assignment_expr

   29 assignment_expr: logical_expr
   30                | ID ASSIGN assignment_expr

   31 logical_expr: relational_expr
   32             | logical_expr EQ relational_expr
   33             | logical_expr NE relational_expr

   34 relational_expr: additive_expr
   35                | relational_expr LT additive_expr
   36                | relational_expr GT additive_expr
   37                | relational_expr LE additive_expr
   38                | relational_expr GE additive_expr

   39 additive_expr: multiplicative_expr
   40              | additive_expr PLUS multiplicative_expr
   41              | additive_expr MINUS multiplicative_expr

   42 multiplicative_expr: unary_expr
   43                    | multiplicative_expr TIMES unary_expr
   44                    | multiplicative_expr DIV unary_expr

   45 unary_expr: postfix_expr
   46           | MINUS unary_expr

   47 postfix_expr: primary_expr
   48             | postfix_expr DOT list_method

   49 list_method: APPEND LPAREN expr RPAREN
   50            | DELETE LPAREN expr RPAREN
   51            | LENGTH LPAREN RPAREN

   52 primary_expr: ID
   53             | NUMBER
   54             | STRING
   55             | LPAREN expr RPAREN
   56             | list_expr

   57 list_expr: LBRACKET expr_list_opt RBRACKET

   58 expr_list_opt: ε
   59              | expr_list

   60 expr_list: expr
   61          | expr_list COMMA expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IF (258) 14 15
    ELSE (259) 15
    INPUT (260) 24
    PRINT (261) 25
    WHILE (262) 16
    RETURN (263) 26 27
    APPEND (264) 49
    DELETE (265) 50
    LENGTH (266) 51
    ID <token_type> (267) 17 18 30 52
    NUMBER <token_type> (268) 53
    STRING <token_type> (269) 54
    ASSIGN (270) 18 30
    EQ (271) 32
    NE (272) 33
    LT (273) 35
    GT (274) 36
    LE (275) 37
    GE (276) 38
    PLUS (277) 40
    MINUS (278) 41 46
    TIMES (279) 43
    DIV (280) 44
    LPAREN (281) 14 15 16 24 25 49 50 51 55
    RPAREN (282) 14 15 16 24 25 49 50 51 55
    COLON (283)
    COMMA (284) 61
    LBRACKET (285) 57
    RBRACKET (286) 57
    DOT (287) 48
    SEMICOLON (288) 17 18 22 23 24 25 26 27
    LBRACE (289) 13
    RBRACE (290) 13
    INT <token_type> (291) 19
    STRING_TYPE <token_type> (292) 20
    LIST_TYPE <token_type> (293) 21
    UMINUS (294)
    THEN (295)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    program (42)
        on left: 2
        on right: 0
    $@1 (43)
        on left: 1
        on right: 2
    statement_list (44)
        on left: 3 4
        on right: 2 4 13
    statement (45)
        on left: 5 6 7 8 9 10 11
        on right: 4
    compound_stmt (46)
        on left: 13
        on right: 7 14 15 16
    $@2 (47)
        on left: 12
        on right: 13
    if_stmt (48)
        on left: 14 15
        on right: 8
    while_stmt (49)
        on left: 16
        on right: 9
    declaration (50)
        on left: 17 18
        on right: 5
    type_specifier <token_type> (51)
        on left: 19 20 21
        on right: 17 18
    expr_stmt (52)
        on left: 22 23
        on right: 6
    io_stmt (53)
        on left: 24 25
        on right: 10
    return_stmt (54)
        on left: 26 27
        on right: 11
    expr <token_type> (55)
        on left: 28
        on right: 14 15 16 18 23 24 25 26 49 50 55 60 61
    assignment_expr <token_type> (56)
        on left: 29 30
        on right: 28 30
    logical_expr <token_type> (57)
        on left: 31 32 33
        on right: 29 32 33
    relational_expr <token_type> (58)
        on left: 34 35 36 37 38
        on right: 31 32 33 35 36 37 38
    additive_expr <token_type> (59)
        on left: 39 40 41
        on right: 34 35 36 37 38 40 41
    multiplicative_expr <token_type> (60)
        on left: 42 43 44
        on right: 39 40 41 43 44
    unary_expr <token_type> (61)
        on left: 45 46
        on right: 42 43 44 46
    postfix_expr <token_type> (62)
        on left: 47 48
        on right: 45 48
    list_method (63)
        on left: 49 50 51
        on right: 48
    primary_expr <token_type> (64)
        on left: 52 53 54 55 56
        on right: 47
    list_expr <token_type> (65)
        on left: 57
        on right: 56
    expr_list_opt <token_type> (66)
        on left: 58 59
        on right: 57
    expr_list <token_type> (67)
        on left: 60 61
        on right: 59 61


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 • statement_list

    $default  reduce using rule 3 (statement_list)

    statement_list  go to state 4


State 3

    0 $accept: program $end •

    $default  accept


State 4

    2 program: $@1 statement_list •
    4 statement_list: statement_list • statement

    IF           shift, and go to state 5
    INPUT        shift, and go to state 6
    PRINT        shift, and go to state 7
    WHILE        shift, and go to state 8
    RETURN       shift, and go to state 9
    ID           shift, and go to state 10
    NUMBER       shift, and go to state 11
    STRING       shift, and go to state 12
    MINUS        shift, and go to state 13
    LPAREN       shift, and go to state 14
    LBRACKET     shift, and go to state 15
    SEMICOLON    shift, and go to state 16
    LBRACE       shift, and go to state 17
    INT          shift, and go to state 18
    STRING_TYPE  shift, and go to state 19
    LIST_TYPE    shift, and go to state 20

    $default  reduce using rule 2 (program)

    statement            go to state 21
    compound_stmt        go to state 22
    if_stmt              go to state 23
    while_stmt           go to state 24
    declaration          go to state 25
    type_specifier       go to state 26
    expr_stmt            go to state 27
    io_stmt              go to state 28
    return_stmt          go to state 29
    expr                 go to state 30
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 5

   14 if_stmt: IF • LPAREN expr RPAREN compound_stmt
   15        | IF • LPAREN expr RPAREN compound_stmt ELSE compound_stmt

    LPAREN  shift, and go to state 40


State 6

   24 io_stmt: INPUT • LPAREN expr RPAREN SEMICOLON

    LPAREN  shift, and go to state 41


State 7

   25 io_stmt: PRINT • LPAREN expr RPAREN SEMICOLON

    LPAREN  shift, and go to state 42


State 8

   16 while_stmt: WHILE • LPAREN expr RPAREN compound_stmt

    LPAREN  shift, and go to state 43


State 9

   26 return_stmt: RETURN • expr SEMICOLON
   27            | RETURN • SEMICOLON

    ID         shift, and go to state 10
    NUMBER     shift, and go to state 11
    STRING     shift, and go to state 12
    MINUS      shift, and go to state 13
    LPAREN     shift, and go to state 14
    LBRACKET   shift, and go to state 15
    SEMICOLON  shift, and go to state 44

    expr                 go to state 45
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 10

   30 assignment_expr: ID • ASSIGN assignment_expr
   52 primary_expr: ID •

    ASSIGN  shift, and go to state 46

    $default  reduce using rule 52 (primary_expr)


State 11

   53 primary_expr: NUMBER •

    $default  reduce using rule 53 (primary_expr)


State 12

   54 primary_expr: STRING •

    $default  reduce using rule 54 (primary_expr)


State 13

   46 unary_expr: MINUS • unary_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    unary_expr    go to state 48
    postfix_expr  go to state 37
    primary_expr  go to state 38
    list_expr     go to state 39


State 14

   55 primary_expr: LPAREN • expr RPAREN

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 49
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 15

   57 list_expr: LBRACKET • expr_list_opt RBRACKET

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    $default  reduce using rule 58 (expr_list_opt)

    expr                 go to state 50
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39
    expr_list_opt        go to state 51
    expr_list            go to state 52


State 16

   22 expr_stmt: SEMICOLON •

    $default  reduce using rule 22 (expr_stmt)


State 17

   13 compound_stmt: LBRACE • $@2 statement_list RBRACE

    $default  reduce using rule 12 ($@2)

    $@2  go to state 53


State 18

   19 type_specifier: INT •

    $default  reduce using rule 19 (type_specifier)


State 19

   20 type_specifier: STRING_TYPE •

    $default  reduce using rule 20 (type_specifier)


State 20

   21 type_specifier: LIST_TYPE •

    $default  reduce using rule 21 (type_specifier)


State 21

    4 statement_list: statement_list statement •

    $default  reduce using rule 4 (statement_list)


State 22

    7 statement: compound_stmt •

    $default  reduce using rule 7 (statement)


State 23

    8 statement: if_stmt •

    $default  reduce using rule 8 (statement)


State 24

    9 statement: while_stmt •

    $default  reduce using rule 9 (statement)


State 25

    5 statement: declaration •

    $default  reduce using rule 5 (statement)


State 26

   17 declaration: type_specifier • ID SEMICOLON
   18            | type_specifier • ID ASSIGN expr SEMICOLON

    ID  shift, and go to state 54


State 27

    6 statement: expr_stmt •

    $default  reduce using rule 6 (statement)


State 28

   10 statement: io_stmt •

    $default  reduce using rule 10 (statement)


State 29

   11 statement: return_stmt •

    $default  reduce using rule 11 (statement)


State 30

   23 expr_stmt: expr • SEMICOLON

    SEMICOLON  shift, and go to state 55


State 31

   28 expr: assignment_expr •

    $default  reduce using rule 28 (expr)


State 32

   29 assignment_expr: logical_expr •
   32 logical_expr: logical_expr • EQ relational_expr
   33             | logical_expr • NE relational_expr

    EQ  shift, and go to state 56
    NE  shift, and go to state 57

    $default  reduce using rule 29 (assignment_expr)


State 33

   31 logical_expr: relational_expr •
   35 relational_expr: relational_expr • LT additive_expr
   36                | relational_expr • GT additive_expr
   37                | relational_expr • LE additive_expr
   38                | relational_expr • GE additive_expr

    LT  shift, and go to state 58
    GT  shift, and go to state 59
    LE  shift, and go to state 60
    GE  shift, and go to state 61

    $default  reduce using rule 31 (logical_expr)


State 34

   34 relational_expr: additive_expr •
   40 additive_expr: additive_expr • PLUS multiplicative_expr
   41              | additive_expr • MINUS multiplicative_expr

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63

    $default  reduce using rule 34 (relational_expr)


State 35

   39 additive_expr: multiplicative_expr •
   43 multiplicative_expr: multiplicative_expr • TIMES unary_expr
   44                    | multiplicative_expr • DIV unary_expr

    TIMES  shift, and go to state 64
    DIV    shift, and go to state 65

    $default  reduce using rule 39 (additive_expr)


State 36

   42 multiplicative_expr: unary_expr •

    $default  reduce using rule 42 (multiplicative_expr)


State 37

   45 unary_expr: postfix_expr •
   48 postfix_expr: postfix_expr • DOT list_method

    DOT  shift, and go to state 66

    $default  reduce using rule 45 (unary_expr)


State 38

   47 postfix_expr: primary_expr •

    $default  reduce using rule 47 (postfix_expr)


State 39

   56 primary_expr: list_expr •

    $default  reduce using rule 56 (primary_expr)


State 40

   14 if_stmt: IF LPAREN • expr RPAREN compound_stmt
   15        | IF LPAREN • expr RPAREN compound_stmt ELSE compound_stmt

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 67
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 41

   24 io_stmt: INPUT LPAREN • expr RPAREN SEMICOLON

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 68
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 42

   25 io_stmt: PRINT LPAREN • expr RPAREN SEMICOLON

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 69
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 43

   16 while_stmt: WHILE LPAREN • expr RPAREN compound_stmt

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 70
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 44

   27 return_stmt: RETURN SEMICOLON •

    $default  reduce using rule 27 (return_stmt)


State 45

   26 return_stmt: RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 71


State 46

   30 assignment_expr: ID ASSIGN • assignment_expr

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    assignment_expr      go to state 72
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 47

   52 primary_expr: ID •

    $default  reduce using rule 52 (primary_expr)


State 48

   46 unary_expr: MINUS unary_expr •

    $default  reduce using rule 46 (unary_expr)


State 49

   55 primary_expr: LPAREN expr • RPAREN

    RPAREN  shift, and go to state 73


State 50

   60 expr_list: expr •

    $default  reduce using rule 60 (expr_list)


State 51

   57 list_expr: LBRACKET expr_list_opt • RBRACKET

    RBRACKET  shift, and go to state 74


State 52

   59 expr_list_opt: expr_list •
   61 expr_list: expr_list • COMMA expr

    COMMA  shift, and go to state 75

    $default  reduce using rule 59 (expr_list_opt)


State 53

   13 compound_stmt: LBRACE $@2 • statement_list RBRACE

    $default  reduce using rule 3 (statement_list)

    statement_list  go to state 76


State 54

   17 declaration: type_specifier ID • SEMICOLON
   18            | type_specifier ID • ASSIGN expr SEMICOLON

    ASSIGN     shift, and go to state 77
    SEMICOLON  shift, and go to state 78


State 55

   23 expr_stmt: expr SEMICOLON •

    $default  reduce using rule 23 (expr_stmt)


State 56

   32 logical_expr: logical_expr EQ • relational_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    relational_expr      go to state 79
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 57

   33 logical_expr: logical_expr NE • relational_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    relational_expr      go to state 80
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 58

   35 relational_expr: relational_expr LT • additive_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    additive_expr        go to state 81
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 59

   36 relational_expr: relational_expr GT • additive_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    additive_expr        go to state 82
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 60

   37 relational_expr: relational_expr LE • additive_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    additive_expr        go to state 83
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 61

   38 relational_expr: relational_expr GE • additive_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    additive_expr        go to state 84
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 62

   40 additive_expr: additive_expr PLUS • multiplicative_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    multiplicative_expr  go to state 85
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 63

   41 additive_expr: additive_expr MINUS • multiplicative_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    multiplicative_expr  go to state 86
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 64

   43 multiplicative_expr: multiplicative_expr TIMES • unary_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    unary_expr    go to state 87
    postfix_expr  go to state 37
    primary_expr  go to state 38
    list_expr     go to state 39


State 65

   44 multiplicative_expr: multiplicative_expr DIV • unary_expr

    ID        shift, and go to state 47
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    unary_expr    go to state 88
    postfix_expr  go to state 37
    primary_expr  go to state 38
    list_expr     go to state 39


State 66

   48 postfix_expr: postfix_expr DOT • list_method

    APPEND  shift, and go to state 89
    DELETE  shift, and go to state 90
    LENGTH  shift, and go to state 91

    list_method  go to state 92


State 67

   14 if_stmt: IF LPAREN expr • RPAREN compound_stmt
   15        | IF LPAREN expr • RPAREN compound_stmt ELSE compound_stmt

    RPAREN  shift, and go to state 93


State 68

   24 io_stmt: INPUT LPAREN expr • RPAREN SEMICOLON

    RPAREN  shift, and go to state 94


State 69

   25 io_stmt: PRINT LPAREN expr • RPAREN SEMICOLON

    RPAREN  shift, and go to state 95


State 70

   16 while_stmt: WHILE LPAREN expr • RPAREN compound_stmt

    RPAREN  shift, and go to state 96


State 71

   26 return_stmt: RETURN expr SEMICOLON •

    $default  reduce using rule 26 (return_stmt)


State 72

   30 assignment_expr: ID ASSIGN assignment_expr •

    $default  reduce using rule 30 (assignment_expr)


State 73

   55 primary_expr: LPAREN expr RPAREN •

    $default  reduce using rule 55 (primary_expr)


State 74

   57 list_expr: LBRACKET expr_list_opt RBRACKET •

    $default  reduce using rule 57 (list_expr)


State 75

   61 expr_list: expr_list COMMA • expr

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 97
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 76

    4 statement_list: statement_list • statement
   13 compound_stmt: LBRACE $@2 statement_list • RBRACE

    IF           shift, and go to state 5
    INPUT        shift, and go to state 6
    PRINT        shift, and go to state 7
    WHILE        shift, and go to state 8
    RETURN       shift, and go to state 9
    ID           shift, and go to state 10
    NUMBER       shift, and go to state 11
    STRING       shift, and go to state 12
    MINUS        shift, and go to state 13
    LPAREN       shift, and go to state 14
    LBRACKET     shift, and go to state 15
    SEMICOLON    shift, and go to state 16
    LBRACE       shift, and go to state 17
    RBRACE       shift, and go to state 98
    INT          shift, and go to state 18
    STRING_TYPE  shift, and go to state 19
    LIST_TYPE    shift, and go to state 20

    statement            go to state 21
    compound_stmt        go to state 22
    if_stmt              go to state 23
    while_stmt           go to state 24
    declaration          go to state 25
    type_specifier       go to state 26
    expr_stmt            go to state 27
    io_stmt              go to state 28
    return_stmt          go to state 29
    expr                 go to state 30
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 77

   18 declaration: type_specifier ID ASSIGN • expr SEMICOLON

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 99
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 78

   17 declaration: type_specifier ID SEMICOLON •

    $default  reduce using rule 17 (declaration)


State 79

   32 logical_expr: logical_expr EQ relational_expr •
   35 relational_expr: relational_expr • LT additive_expr
   36                | relational_expr • GT additive_expr
   37                | relational_expr • LE additive_expr
   38                | relational_expr • GE additive_expr

    LT  shift, and go to state 58
    GT  shift, and go to state 59
    LE  shift, and go to state 60
    GE  shift, and go to state 61

    $default  reduce using rule 32 (logical_expr)


State 80

   33 logical_expr: logical_expr NE relational_expr •
   35 relational_expr: relational_expr • LT additive_expr
   36                | relational_expr • GT additive_expr
   37                | relational_expr • LE additive_expr
   38                | relational_expr • GE additive_expr

    LT  shift, and go to state 58
    GT  shift, and go to state 59
    LE  shift, and go to state 60
    GE  shift, and go to state 61

    $default  reduce using rule 33 (logical_expr)


State 81

   35 relational_expr: relational_expr LT additive_expr •
   40 additive_expr: additive_expr • PLUS multiplicative_expr
   41              | additive_expr • MINUS multiplicative_expr

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63

    $default  reduce using rule 35 (relational_expr)


State 82

   36 relational_expr: relational_expr GT additive_expr •
   40 additive_expr: additive_expr • PLUS multiplicative_expr
   41              | additive_expr • MINUS multiplicative_expr

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63

    $default  reduce using rule 36 (relational_expr)


State 83

   37 relational_expr: relational_expr LE additive_expr •
   40 additive_expr: additive_expr • PLUS multiplicative_expr
   41              | additive_expr • MINUS multiplicative_expr

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63

    $default  reduce using rule 37 (relational_expr)


State 84

   38 relational_expr: relational_expr GE additive_expr •
   40 additive_expr: additive_expr • PLUS multiplicative_expr
   41              | additive_expr • MINUS multiplicative_expr

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63

    $default  reduce using rule 38 (relational_expr)


State 85

   40 additive_expr: additive_expr PLUS multiplicative_expr •
   43 multiplicative_expr: multiplicative_expr • TIMES unary_expr
   44                    | multiplicative_expr • DIV unary_expr

    TIMES  shift, and go to state 64
    DIV    shift, and go to state 65

    $default  reduce using rule 40 (additive_expr)


State 86

   41 additive_expr: additive_expr MINUS multiplicative_expr •
   43 multiplicative_expr: multiplicative_expr • TIMES unary_expr
   44                    | multiplicative_expr • DIV unary_expr

    TIMES  shift, and go to state 64
    DIV    shift, and go to state 65

    $default  reduce using rule 41 (additive_expr)


State 87

   43 multiplicative_expr: multiplicative_expr TIMES unary_expr •

    $default  reduce using rule 43 (multiplicative_expr)


State 88

   44 multiplicative_expr: multiplicative_expr DIV unary_expr •

    $default  reduce using rule 44 (multiplicative_expr)


State 89

   49 list_method: APPEND • LPAREN expr RPAREN

    LPAREN  shift, and go to state 100


State 90

   50 list_method: DELETE • LPAREN expr RPAREN

    LPAREN  shift, and go to state 101


State 91

   51 list_method: LENGTH • LPAREN RPAREN

    LPAREN  shift, and go to state 102


State 92

   48 postfix_expr: postfix_expr DOT list_method •

    $default  reduce using rule 48 (postfix_expr)


State 93

   14 if_stmt: IF LPAREN expr RPAREN • compound_stmt
   15        | IF LPAREN expr RPAREN • compound_stmt ELSE compound_stmt

    LBRACE  shift, and go to state 17

    compound_stmt  go to state 103


State 94

   24 io_stmt: INPUT LPAREN expr RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 104


State 95

   25 io_stmt: PRINT LPAREN expr RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 105


State 96

   16 while_stmt: WHILE LPAREN expr RPAREN • compound_stmt

    LBRACE  shift, and go to state 17

    compound_stmt  go to state 106


State 97

   61 expr_list: expr_list COMMA expr •

    $default  reduce using rule 61 (expr_list)


State 98

   13 compound_stmt: LBRACE $@2 statement_list RBRACE •

    $default  reduce using rule 13 (compound_stmt)


State 99

   18 declaration: type_specifier ID ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 107


State 100

   49 list_method: APPEND LPAREN • expr RPAREN

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 108
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 101

   50 list_method: DELETE LPAREN • expr RPAREN

    ID        shift, and go to state 10
    NUMBER    shift, and go to state 11
    STRING    shift, and go to state 12
    MINUS     shift, and go to state 13
    LPAREN    shift, and go to state 14
    LBRACKET  shift, and go to state 15

    expr                 go to state 109
    assignment_expr      go to state 31
    logical_expr         go to state 32
    relational_expr      go to state 33
    additive_expr        go to state 34
    multiplicative_expr  go to state 35
    unary_expr           go to state 36
    postfix_expr         go to state 37
    primary_expr         go to state 38
    list_expr            go to state 39


State 102

   51 list_method: LENGTH LPAREN • RPAREN

    RPAREN  shift, and go to state 110


State 103

   14 if_stmt: IF LPAREN expr RPAREN compound_stmt •
   15        | IF LPAREN expr RPAREN compound_stmt • ELSE compound_stmt

    ELSE  shift, and go to state 111

    $default  reduce using rule 14 (if_stmt)


State 104

   24 io_stmt: INPUT LPAREN expr RPAREN SEMICOLON •

    $default  reduce using rule 24 (io_stmt)


State 105

   25 io_stmt: PRINT LPAREN expr RPAREN SEMICOLON •

    $default  reduce using rule 25 (io_stmt)


State 106

   16 while_stmt: WHILE LPAREN expr RPAREN compound_stmt •

    $default  reduce using rule 16 (while_stmt)


State 107

   18 declaration: type_specifier ID ASSIGN expr SEMICOLON •

    $default  reduce using rule 18 (declaration)


State 108

   49 list_method: APPEND LPAREN expr • RPAREN

    RPAREN  shift, and go to state 112


State 109

   50 list_method: DELETE LPAREN expr • RPAREN

    RPAREN  shift, and go to state 113


State 110

   51 list_method: LENGTH LPAREN RPAREN •

    $default  reduce using rule 51 (list_method)


State 111

   15 if_stmt: IF LPAREN expr RPAREN compound_stmt ELSE • compound_stmt

    LBRACE  shift, and go to state 17

    compound_stmt  go to state 114


State 112

   49 list_method: APPEND LPAREN expr RPAREN •

    $default  reduce using rule 49 (list_method)


State 113

   50 list_method: DELETE LPAREN expr RPAREN •

    $default  reduce using rule 50 (list_method)


State 114

   15 if_stmt: IF LPAREN expr RPAREN compound_stmt ELSE compound_stmt •

    $default  reduce using rule 15 (if_stmt)
